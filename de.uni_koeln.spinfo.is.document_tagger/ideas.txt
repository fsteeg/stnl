TODOs

- [DONE] Evaluation implementieren: F-Mass etc
- [DONE] Nicht nur wenn Paradigma komplett gleich, sondern wenn n gleiche Woerter
- n anpassen beim lernen, Evaluieren
- [DONE] Stopwoerter englisch
- [DONE] Richtige Texte, englisch (delicious, Ressourcen im Brueckner-Artikel)
- [DONE] In Klassen aufteilen: Lernen und Klassifizieren
- [DONE] Delicious API ins Projekt
- Ausgabe der gelesenen Seiten: x gelesen, y ok.
- Statusanzeige mit spinning slash oder sowas in der Art
- [DONE] Aufraeumen, Code, Struktur
- Binaeren Index einlesen als option
- Klassifikation optimieren damit man mal mit 800 laufen lassen kann
- [DONE] Nur bestimmte tags oder besser: bundles crawlen, ein bundle eine domaene
- [DONE] Vereinheitliche: Texte aus Dateien im Filesystem oder ueber einen Delicious-Account
- Tokenisierung da stimmt was nicht, beu umbruechen fehlen leerzeichen
- Stopword-Filtern noch nicht ok, teils gross-klein, teils fehlen wohl noch ein paar woerter
- Stopword-Filtern performanter, nicht jedesmal neu und mit Arrays.binarySearch
- fuer englisch und deutsch filtern immer, weil text kann beides sein wenn delicious... so viel zu bedenken fuer freies texte crawlen... eher delicious zum zusammenstellen des korpus mit komfort...
- fuer dt. scheint das encoding Aerger zu machen

Ideen

- Stemming mit WordNet?
- Tagging von WordNet verwenden?
- Sem. Relationen, z.B. Synonyme
- Bundles crawlen, sampling frame, Korpora
- Anders parsen: nicht nur p-content
- Zum Thema SALE, Tesla: Alles noetig fuer viele vers. Sachen, auch hier: 
Text->Toekns->Stemming->Filtern/Wortlisten->Suffixbaum->Paradigmen->Verschlagwortung
-Paradigmen anders, von wegen dirived und solche ideen, Suffixbaum-Sachen

Bereiche

- ML-Terminologie: Lernen, Cube
- Brueckner-Begriffe, unser System klassifizieren
- Code, UML
- Evaluation, Recall, Precision, F-Mass

Aufteilung HA

- Verfahren: Web, Crawling, Delicious, Korpora
- Verfahren: Tesla, Java EE, SALE
- Verfahren: struktur. Syntaxanalyse mit Suffixbaeumen