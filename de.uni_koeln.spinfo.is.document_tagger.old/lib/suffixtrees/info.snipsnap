Suffixbäume sind eine vielseitige Datenstruktur, mit vielen effizienten Anwendungsmöglichkeiten in der Stringverarbeitung. Im Rahmen dieses Projekts entstehen eine API zur Anwendung von Suffixbäumen in der Sprachverarbeitung, GUI-Komponenten zur Arbeit mit Suffixbäumen sowie die Umsetzung von Suffixbäumen als Tesla-Komponente.

{scaled-image:img=stnl-tree.jpg|thumb=150|original=600}Ein Suffixbaum im Eclipse-View{scaled-image}

1 Downloads
\\
- Suffixbaum-API: Java-Klassen zur Arbeit mit Suffixbäumen etc. für Zahlen, Zeichen und Zeichenketten: {attachment:trees-api.zip} (siehe unten).
- Suffixbaum-View: Eclipse-View zur Darstellung von Suffixbäumen etc., die aus einem eingegebenen Text erstellt werden: {attachment:trees-view.zip}, zum Installieren entpacken und in den "plugins"-Ordner kopieren, nach einem Neustart: Window -> Show View -> Suffix Trees...
- GraphViz-View: Eclipse-View zur Darstellung einer GraphViz/Dot-Datei: {attachment:graphviz-view.zip} (die Suffixbäume können in dieses Format exportiert werden können), zum Installieren entpacken und in den "plugins"-Ordner kopieren, nach einem Neustart: Window -> Show View -> GraphViz...

1 API-Benutzung
\\
Über die API können Suffixbäume konstruiert werden, die als Symbole Zahlen, einzelne Zeichen (morphologische Struktur) oder Zeichenketten (syntaktische Struktur) enthalten.

Je nach Anwendung werden unterschiedliche Klassen verwendet: NumericSuffixTree für Zahlen, CharSuffixTree für Zeichen und WordSuffixTree für Zeichenketten. Einen Überblick über die Klassenhierarchie gibt das folgende Klassendiagramm.

{scaled-image:img=classes.jpg|thumb=250|original=600}Klassenhierarchie{scaled-image}

Zur Installation den Ordner mit den Quelltexten dem Classpath hinzufügen (bzw. in Eclipse über Rechtsklick auf Ordner, Build Path->Use as Source Folder). Dann können die Klassen verwendet werden.

1.1 Dot-Export
\\
Alle Bäume können in das Dot-Format exportiert werden, einer Sprache zur Beschreibung von Graphen, die mithilfe des Programms GraphViz visualisiert werden können. So erzeugt etwa folgendes Codebeispiel zwei Suffixbäume, die von GraphViz gerendert den Darstellungen in den folgenden Abbildungen entsprechen.

{code}

NumericSuffixTree tree;
// ein Baum mit Woertern:
tree = new WordSuffixTree(
		"Ich esse Fisch. Ich esse Fleisch. Ich esse. Ich trinke.");
tree.exportDot("word-tree.dot");

// ein Baum mit Buchstaben:
tree = new CharSuffixTree("aufgegangen abgegangen aufgehangen");
tree.exportDot("char-tree.dot");

{code}

{scaled-image:img=stnl-tree.jpg|thumb=400|original=600}Gerenderte Darstellung des Baums mit Wörtern.{scaled-image}

Eine Beeinflussung der Baumkonstruktion (rückwärts, generalisiert, in der Datenbank) erfolgt über die Verwendung anderer Konstruktoren (siehe integrierte Javadoc).

In vergleichbarer Art kann etwa der Baum zu einem DAG (directed acyclic graph) komprimiert werden. Der DAG kann ebenso als Dot-Datei exportiert werden.

{code}
NumericSuffixTree wordTree = new WordSuffixTree(
		"Ich esse Fisch. Ich esse Fleisch. Ich esse. Ich trinke.");
DAG wordDag = new DAG(wordTree);
wordDag.exportDot("word-dag.dot");
{code}

{scaled-image:img=stnl-dag.jpg|thumb=400|original=600}Gerenderte Darstellung des DAG mit Wörtern.{scaled-image}

1.1 Zugriff auf Knoten und Kanten
\\
- z.B. Auslesen der Kantenlabels von Kanten, die von der SuffixTreeWurzel ausgehen
 
{code}
for (Node node : tree.getRoot().getChildren()) {
	System.out.println(tree.getIncomingEdgeLabel(node));
}
{code}

- z.B. Zugriff auf Blätter ausgehend von der Wurzel zur Ermittlung von Vorkommen, Distribution und Frequenz von Strings unterhalb der Wurzel (Frequenz = Anzahl der Blätter des Teilbaums):

{code}
// Ermittlung der Blaetter runterhalb eines Knotens, z.B. root:
Node node = tree.getRoot();
// Das true um nur Blaetter zu bekommen:
ArrayList<Node> allNodes = tree.getAllNodes(node, true);
System.out.println("Blaetter im Teilbaum unter dem Knoten: " + allNodes.size());
for (Node leaf : allNodes) {
	// Verwendung der Blaetter:
	System.out.println("Kantenlabel zum Blatt: " +
			tree.getIncomingEdgeLabel(leaf));
}
{code}

Erläuterungen zu sonstigen Methoden finden sich in der integrierten Javadoc.

1.1 Beispiel-Anwendung
\\
Im Folgenden soll anhand eines kleinen Beispiels die Verwendung eines Suffixbaumes demonstriert werden. Dabei sollen die in einem Text enthaltenen Wörter ermittelt werden, die zueinander in paradigmatischer Beziehung stehen, so sollte etwa für die folgenden Anweisungen die folgende Ausgabe erfolgen.

{code}
String text = "we are eating bread. we are drinking beer. "
		+ "we are eating soup. we are drinking soup. you are drinking beer."
Paradigms p = new Paradigms(text);
System.out.println(p.pardigmsInText);
{code}

{java-console}
\[\[soup, bread\], \[drinking, eating\], \[soup, beer\], \[you, we\]\]
{java-console}

Da Wörter, die zueinander in paradigmatischer Beziehung stehen dem jeweils ersten Wort der Beschriftungen der Kanten entsprechen, die von inneren Knoten zu ihren Nachfolgern führen, ist das Wissen um die gesuchte Information strukturell bedingt bereits im Baum enthalten, und muss zur Implementierung der gewünschten Funktionalität lediglich in den Bäumen für den Text sowie für den umgekehrten Text abgerufen werden:

{code}

class Paradigms {
    AlphanumericSuffixTree forwardTree;
    AlphanumericSuffixTree backwardTree;
    Set<Set<String>> pardigmsInText;

    public Paradigms(String text) {
        // forward: "the man. the boy." --> [man, boy]
        this.forwardTree = new WordSuffixTree(text, false, true);
        pardigmsInText = bootstrapParadigms(forwardTree);
        // backward: "a man. the man." --> [a, the]
        this.backwardTree = new WordSuffixTree(text, true, true);
        pardigmsInText.addAll(bootstrapParadigms(backwardTree));
    }

    private Set<Set<String>> bootstrapParadigms(AlphanumericSuffixTree tree) {
        Set<Set<String>> paradigms = new HashSet<Set<String>>();
        for (Node node : tree.getAllNodes()) {
            if (node.isInternal()) {
                // the current paradigm: all children of an inner node
                Set<String> paradigm = new HashSet<String>();
                for (Node child : node.getChildren()) {
                    /*
                     * add the first word of the child's incoming edge label to
                     * the current paradigm:
                     */
                    paradigm
                            .add(tree.getIncomingEdgeLabel(child).split(" ")[0]);
                }
                paradigms.add(paradigm);
            }
        }
        return paradigms;
    }
}
{code}

1 Entwickler-Doku
\\
1.1 Projekte
\\
Subversion-Repository unter: https://svn.sourceforge.net/svnroot/stnl/ Ein Eclipse-Plugin fuer Subversion gibts per Update-Manager von hier unter http://subclipse.tigris.org/update_1.0.x (in Eclipse, Window -> Help -> Software Updates -> Find... -> New update site, da eintragen).
 
- __de.uni_koeln.spinfo.strings.core__: Algorithmen und Datenstrukturen, Swing-GUI zur Morphologie
- __de.uni_koeln.spinfo.strings.core.plugin__: Suffixbaum-Erstellung und -Visualisierung in einem Eclipse-View
- __de.uni_koeln.spinfo.strings.core.plugin.dotviewer__: View zum Rendern einer in Eclipse ausgewaehlten Dot-Datei (praktisch etwa beim Entwickeln und zeigt auch Bilder an)
 
CVS auf kerberos, in /usr/local/cvs/tesla
 
- __tesla.component.suffixtree__: Suffixbaum als Tesla-Komponente

1.1 Aktuell

- Lineare Laufzeit auch bei generalisierten Baeumen

{code}
// matching soweit ok, weiter: i phasen ueberspringen...
{code}

- Performanz bei DB-Verwendung
 
{code}
// extrem langsam im Vergleich zum RAM, zur Zeit nicht eilig...
{code}

- Labels fuer DAGs korrigieren, in Baumstruktur, Kanten...

{code}
// Erfordert eine Umstellung der Datenstruktur: 
// Wir brauchen eine eingene Klasse fuer Kanten, denke ich...
{code}

- Transformation DAG zu generalisiertem DAG

1.1 TODO

 - Verwaltung von Funstellen mehrfach auftretender Substrings
 - Ueberarbeitung von Zugriffsfunktionen fuer Indices...
 - Eclipse-Sachen mit in Update-Site
 - NumericSuffixTree refactoren (Verstandlichkeit, Struktur)
 
1 Links

 - {link:Sourceforge-Site dieses Projekts|http://stnl.sourceforge.net}
 - {link:GraphViz Graph Visualization Software|http://www.graphviz.org}
 - {link:BioJava API|http://biojava.org/wiki/Main_Page}
 - {link:Aktantenerkennung|http://webdyn1.rrz.uni-koeln.de:2218/wiki/lehre/index.php/Bild:Aktantenerkennung.pdf}
 - {link:Semmatrix|http://webdyn1.rrz.uni-koeln.de:2218/wiki/lehre/index.php/Bild:SemMatrix.pdf}




